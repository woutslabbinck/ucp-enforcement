[object Object]
<http://example.org/context> <http://example.org/resourceOwner> <https://pod.woutslabbinck.com/profile/card#me> .
<http://example.org/context> <http://example.org/requestingParty> <https://woslabbi.pod.knows.idlab.ugent.be/profile/card#me> .
<http://example.org/context> <http://example.org/target> <http://localhost:3000/test.ttl> .
<http://example.org/context> <http://example.org/requestPermission> <http://www.w3.org/ns/auth/acl#Read> .

@prefix odrl: <http://www.w3.org/ns/odrl/2/> .
@prefix : <http://example.org/> .
@prefix acl: <http://www.w3.org/ns/auth/acl#>.
@prefix fno:  <https://w3id.org/function/ontology#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
# If the context of a request matches an ODRL Permission rule then read access is granted.
# Note: constraints are not checked -> as a result if there are policies with constraint in the ucon rule set, access will be granted without checking them


# Create ODRL Rule: doesn't exist (`odrl:write` and `odrl:append` are deprecated)


# Read ODRL rule
{ 
  	?permission a odrl:Permission;
      	odrl:action ?action ;
      	odrl:target ?targetResource ;
      	odrl:assignee ?requestedParty;
      	odrl:assigner ?resourceOwner .   
		
	?action list:in (odrl:use odrl:read) . # multiple options

    ?SCOPE log:notIncludes { ?permission odrl:constraint ?anything }. # No odrl:constraints may be present

    # context of a request
  	?context 
        :resourceOwner ?resourceOwner;
      	:requestingParty ?requestedParty;
      	:target ?targetResource;
      	:requestPermission acl:Read.

    :uuid5 log:uuid ?uuidStringdataUsagePolicyExecution.
    ( "urn:uuid:" ?uuidStringdataUsagePolicyExecution) string:concatenation ?urnUuidStringdataUsagePolicyExecution.
    ?dataUsagePolicyExecution log:uri ?urnUuidStringdataUsagePolicyExecution .
} =>
{
    ?dataUsagePolicyExecution a fno:Execution;
        fno:executes <http://example.org/dataUsage> ; 
        :accessModesAllowed acl:Read.
}.

# Update ODRL Rule (odrl:modify: new asset is not created, not same as acl:write)
{ 
  	?permission a odrl:Permission;
      	odrl:action ?action ;
      	odrl:target ?targetResource ;
      	odrl:assignee ?requestedParty;
      	odrl:assigner ?resourceOwner .   
		
	?action list:in (odrl:use odrl:modify). # multiple options

    ?SCOPE log:notIncludes { ?permission odrl:constraint ?anything }. # No odrl:constraints may be present

    # context of a request
  	?context 
        :resourceOwner ?resourceOwner;
      	:requestingParty ?requestedParty;
      	:target ?targetResource;
      	:requestPermission acl:Write.

    :uuid6 log:uuid ?uuidStringdataUsagePolicyExecution.
    ( "urn:uuid:" ?uuidStringdataUsagePolicyExecution) string:concatenation ?urnUuidStringdataUsagePolicyExecution.
    ?dataUsagePolicyExecution log:uri ?urnUuidStringdataUsagePolicyExecution .
} =>
{
    ?dataUsagePolicyExecution a fno:Execution;
        fno:executes <http://example.org/dataUsage> ; 
        :accessModesAllowed acl:Write.
}.

# Delete ODRL Rule (odrl:delete does exist, but there is no acl:Delete)
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix odrl: <http://www.w3.org/ns/odrl/2/> .
@prefix : <http://example.org/> .
@prefix acl: <http://www.w3.org/ns/auth/acl#>.
@prefix fno:  <https://w3id.org/function/ontology#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#> .
@prefix time: <http://www.w3.org/2000/10/swap/time#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
# Create ODRL Rule: doesn't exist (`odrl:write` and `odrl:append` are deprecated)
{ :currentTime :is ?currentTime } <= { "" time:localTime ?currentTime }.

# Read ODRL rule
{ 
  	?permission a odrl:Permission;
      	odrl:action ?action ;
      	odrl:target ?targetResource ;
      	odrl:assignee ?requestedParty;
      	odrl:assigner ?resourceOwner .   
		
	?action list:in (odrl:use odrl:read) . # multiple options

    # context of a request
  	?context 
        :resourceOwner ?resourceOwner;
      	:requestingParty ?requestedParty;
      	:target ?targetResource;
      	:requestPermission acl:Read.

    :uuid5 log:uuid ?uuidStringdataUsagePolicyExecution.
    ( "urn:uuid:" ?uuidStringdataUsagePolicyExecution) string:concatenation ?urnUuidStringdataUsagePolicyExecution.
    ?dataUsagePolicyExecution log:uri ?urnUuidStringdataUsagePolicyExecution .

	# Constraint checking
	# number of constraints must be two (temporal needs lower and upper bound)
    (?template {?permission odrl:constraint _:s} ?L) log:collectAllIn ?SCOPE.
	?L list:length 2 .
	
	:currentTime :is ?currentTime .

	# lower bound
	?permission odrl:constraint ?lowerBoundIRI .
	?lowerBoundIRI odrl:leftOperand odrl:dateTime ;
        odrl:operator odrl:gt ;
        odrl:rightOperand ?lowerBound .

	# greater bound
	?permission odrl:constraint ?upperBoundIRI .
	?upperBoundIRI odrl:leftOperand odrl:dateTime ;
        odrl:operator odrl:lt ;
        odrl:rightOperand ?upperBound .

	# ?lowerBound < ?currentTime < ?upperBound
	?currentTime math:greaterThan ?lowerBound . 
	?currentTime math:lessThan ?upperBound .	
} =>
{
    ?dataUsagePolicyExecution a fno:Execution;
        fno:executes <http://example.org/dataUsage> ; 
        :accessModesAllowed acl:Read.
  	?dataUsagePolicyExecution 	<http://purl.org/dc/terms/issued> ?currentTime . 
  	
}.

# Update ODRL Rule (odrl:modify: new asset is not created, not same as acl:write)
{ 
  	?permission a odrl:Permission;
      	odrl:action ?action ;
      	odrl:target ?targetResource ;
      	odrl:assignee ?requestedParty;
      	odrl:assigner ?resourceOwner .   
		
	?action list:in (odrl:use odrl:modify). # multiple options

    # context of a request
  	?context 
        :resourceOwner ?resourceOwner;
      	:requestingParty ?requestedParty;
      	:target ?targetResource;
      	:requestPermission acl:Write.

    :uuid6 log:uuid ?uuidStringdataUsagePolicyExecution.
    ( "urn:uuid:" ?uuidStringdataUsagePolicyExecution) string:concatenation ?urnUuidStringdataUsagePolicyExecution.
    ?dataUsagePolicyExecution log:uri ?urnUuidStringdataUsagePolicyExecution .

	# Constraint checking
	# number of constraints must be two (temporal needs lower and upper bound)
    (?template {?permission odrl:constraint _:s} ?L) log:collectAllIn ?SCOPE.
	?L list:length 2 .
	
	:currentTime :is ?currentTime .

	# lower bound
	?permission odrl:constraint ?lowerBoundIRI .
	?lowerBoundIRI odrl:leftOperand odrl:dateTime ;
        odrl:operator odrl:gt ;
        odrl:rightOperand ?lowerBound .

	# greater bound
	?permission odrl:constraint ?upperBoundIRI .
	?upperBoundIRI odrl:leftOperand odrl:dateTime ;
        odrl:operator odrl:lt ;
        odrl:rightOperand ?upperBound .

	# ?lowerBound < ?currentTime < ?upperBound
	?currentTime math:greaterThan ?lowerBound . 
	?currentTime math:lessThan ?upperBound .
} =>
{
    ?dataUsagePolicyExecution a fno:Execution;
        fno:executes <http://example.org/dataUsage> ; 
        :accessModesAllowed acl:Write.
	?dataUsagePolicyExecution 	<http://purl.org/dc/terms/issued> ?currentTime . 
}.

# Delete ODRL Rule (odrl:delete does exist, but there is no acl:Delete)